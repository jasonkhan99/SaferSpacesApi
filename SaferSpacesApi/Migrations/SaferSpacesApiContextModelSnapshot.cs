// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaferSpacesApi.Models;

namespace SaferSpacesApi.Migrations
{
    [DbContext(typeof(SaferSpacesApiContext))]
    partial class SaferSpacesApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SaferSpacesApi.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("EventDate");

                    b.Property<DateTime>("EventTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PlaceId");

                    b.HasKey("EventId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Description = "A queer dance party focused on building community through nightlife",
                            EventDate = new DateTime(2020, 9, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTime = new DateTime(2020, 9, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Judy on Duty"
                        },
                        new
                        {
                            EventId = 2,
                            Description = "An outer space themed karaoke dance night",
                            EventDate = new DateTime(2020, 9, 19, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTime = new DateTime(2020, 9, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cosmic Cafe"
                        },
                        new
                        {
                            EventId = 3,
                            Description = "A monthly live music event",
                            EventDate = new DateTime(2020, 9, 26, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTime = new DateTime(2020, 9, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Live in the Depths"
                        });
                });

            modelBuilder.Entity("SaferSpacesApi.Models.EventPlace", b =>
                {
                    b.Property<int>("EventPlaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("PlaceId");

                    b.HasKey("EventPlaceId");

                    b.HasIndex("EventId");

                    b.HasIndex("PlaceId");

                    b.ToTable("EventPlace");
                });

            modelBuilder.Entity("SaferSpacesApi.Models.EventTestimonial", b =>
                {
                    b.Property<int>("EventTestimonialId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<int>("TestimonialId");

                    b.HasKey("EventTestimonialId");

                    b.HasIndex("EventId");

                    b.HasIndex("TestimonialId");

                    b.ToTable("EventTestimonial");
                });

            modelBuilder.Entity("SaferSpacesApi.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RestroomFeatures");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("PlaceId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Address = "1305 SE 8th Ave, Portland, OR 97214",
                            Description = "A bar with DJ's and Live Music and an outdoor patio.",
                            Name = "White Owl Social Club",
                            RestroomFeatures = 1,
                            Type = "Bar"
                        },
                        new
                        {
                            PlaceId = 2,
                            Address = "727 SE Grand Ave, Portland, OR 97214",
                            Description = "A bar with a dance floor upstairs nightky events.",
                            Name = "Bit House Saloon",
                            RestroomFeatures = 3,
                            Type = "Bar"
                        },
                        new
                        {
                            PlaceId = 3,
                            Address = "1709 SE Hawthorne Blvd, Portland, OR, 97214",
                            Description = "A bar with live music and events.",
                            Name = "No Fun",
                            RestroomFeatures = 2,
                            Type = "Bar"
                        },
                        new
                        {
                            PlaceId = 4,
                            Address = "5040 SE Milwaukie Ave, Portland, OR, 97202",
                            Description = "A large warehouse to throw all kinds of events",
                            Name = "Watershed",
                            RestroomFeatures = 1,
                            Type = "Event Space"
                        },
                        new
                        {
                            PlaceId = 5,
                            Address = "1332 W Burnside, Portland, OR, 97209",
                            Description = "Historic Building with a stage for live music",
                            Name = "Crystal Ballroom",
                            RestroomFeatures = 1,
                            Type = "Concert Venue"
                        });
                });

            modelBuilder.Entity("SaferSpacesApi.Models.PlaceTestimonial", b =>
                {
                    b.Property<int>("PlaceTestimonialId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PlaceId");

                    b.Property<int>("TestimonialId");

                    b.HasKey("PlaceTestimonialId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TestimonialId");

                    b.ToTable("PlaceTestimonial");
                });

            modelBuilder.Entity("SaferSpacesApi.Models.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventId");

                    b.Property<string>("Management");

                    b.Property<string>("Other");

                    b.Property<int?>("PlaceId");

                    b.Property<string>("Story");

                    b.HasKey("TestimonialId");

                    b.HasIndex("EventId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Testimonials");

                    b.HasData(
                        new
                        {
                            TestimonialId = 1,
                            Management = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate",
                            Other = "velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Story = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
                        });
                });

            modelBuilder.Entity("SaferSpacesApi.Models.Event", b =>
                {
                    b.HasOne("SaferSpacesApi.Models.Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("SaferSpacesApi.Models.EventPlace", b =>
                {
                    b.HasOne("SaferSpacesApi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaferSpacesApi.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaferSpacesApi.Models.EventTestimonial", b =>
                {
                    b.HasOne("SaferSpacesApi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaferSpacesApi.Models.Testimonial", "Testimonial")
                        .WithMany()
                        .HasForeignKey("TestimonialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaferSpacesApi.Models.PlaceTestimonial", b =>
                {
                    b.HasOne("SaferSpacesApi.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SaferSpacesApi.Models.Testimonial", "Testimonial")
                        .WithMany()
                        .HasForeignKey("TestimonialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SaferSpacesApi.Models.Testimonial", b =>
                {
                    b.HasOne("SaferSpacesApi.Models.Event")
                        .WithMany("Testimonials")
                        .HasForeignKey("EventId");

                    b.HasOne("SaferSpacesApi.Models.Place")
                        .WithMany("Testimonials")
                        .HasForeignKey("PlaceId");
                });
#pragma warning restore 612, 618
        }
    }
}
